properties([
    parameters([
        string(defaultValue: '/home/t4/wanghu/os/install/bin/nasm', description: 'nasm', name: 'TOOL_NASM'),
        string(defaultValue: '/usr/local/gcc-histore', description: 'gcc', name: 'TOOL_GCC'),
        string(defaultValue: '/usr/local/histore-clang', description: 'clang', name: 'TOOL_CLANG'),
        string(defaultValue: '/home/wanghu.zc/os/install', description: 'qemu', name: 'TOOL_QEMU'),
        gitParameter(
            branch: '',
            branchFilter: 'origin/(.*)',
            defaultValue: 'master',
            description: '',
            name: 'BRANCH',
            quickFilterEnabled: false,
            selectedValue: 'NONE',
            sortMode: 'NONE',
            tagFilter: '*',
            type: 'PT_BRANCH'
       )
   ])
])

node {
    stage('clean up'){
        deleteDir()
        echo "build branch: ${params.BRANCH}"
        echo "TOOL_NASM: ${params.TOOL_NASM}"
    }
    stage('build'){
        git credentialsId: 'github_pass', branch: "${params.BRANCH}", url: 'https://github.com/lake-z/cing.git'
        dir('build') {
            withEnv(["CC=${params.TOOL_GCC}/bin/gcc", "CXX=${params.TOOL_GCC}/bin/g++"]) {
                def build_dir = pwd()
                sh script: "cmake -DTOOL_NASM=${params.TOOL_NASM} -DTOOL_CLANG=${params.TOOL_CLANG}  .."
                sh script: 'make -j VERBOSE=1'
            }
        }
    }
    stage('built-in tests') {
        dir('build') {
            withEnv(['ASAN_OPTIONS=log_path=asan_log:log_exe_name=1']) {
                try {
                    sh script: "timeout 60s ${params.TOOL_QEMU}/bin/qemu-system-x86_64 -cdrom cing.iso -m 5G -serial stdio -d int -no-shutdown -no-reboot > jks_log.console 2>&1"
                } finally {
                    // sh script: "${params.TOOL_LCOV_HOME}/bin/lcov --capture  --gcov-tool=${TOOL_GCC_HOME}/bin/gcov  --rc lcov_branch_coverage=1 --directory ./ --output-file coverage.info"
                    // archiveArtifacts 'coverage.htm.tar.gz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: '**/jks_log.*'
                }
            }
        }
    }
    stage('post') {
        cleanWs disableDeferredWipeout: true
    }
}
